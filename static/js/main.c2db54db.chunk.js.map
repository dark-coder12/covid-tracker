{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","img/covidImg2.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justifyContent","item","component","Card","xs","m","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","colr","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","CountryPicker","handleCountryChange","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","App","state","fetchedData","setState","this","image","src","covidImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2db54db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__28B-8\",\"card\":\"Cards_card__SD0wd\",\"infected\":\"Cards_infected__24EDx\",\"recovered\":\"Cards_recovered__1AXue\",\"deaths\":\"Cards_deaths__2A8nr\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid, StylesProvider } from '@material-ui/core';\r\n\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ( { data: { confirmed, recovered, deaths, lastUpdate } } ) =>{\r\n\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n\r\n    return(\r\n       <div className = { styles.container } >\r\n        <Grid container spacing = {3} justifyContent ='center' >\r\n            <Grid item component = { Card } xs = {12} m = {3} className = {cx(styles.card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color = 'textSecondary' gutterBottom>\r\n                        Infected\r\n                    </Typography>\r\n                    <Typography variant = 'h5'>\r\n                        <CountUp\r\n                            start = {0}\r\n                            end = {confirmed.value}\r\n                            duration = {2.5}\r\n                            separator = ','\r\n                        />\r\n                    </Typography>\r\n                    <Typography colr = 'textSecondary'>\r\n                        {new Date(lastUpdate).toDateString()}\r\n                    </Typography>\r\n                    <Typography variant = 'body2'>\r\n                        Number of active cases of COVID - 19\r\n                    </Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component = { Card }  xs = {12} m = {3} className = {cx(styles.card, styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color = 'textSecondary' gutterBottom>\r\n                        Recovered\r\n                    </Typography>\r\n                    <Typography variant = 'h5'>\r\n                        <CountUp\r\n                            start = {0}\r\n                            end = {recovered.value}\r\n                            duration = {2.5}\r\n                            separator = ','\r\n                        />\r\n                    </Typography>\r\n                    <Typography colr = 'textSecondary'>\r\n                        {new Date(lastUpdate).toDateString()}\r\n                    </Typography>\r\n                    <Typography variant = 'body2'>\r\n                        Number of recoveries from COVID - 19\r\n                    </Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component = { Card }  xs = {12} m = {3} className = {cx(styles.card, styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color = 'textSecondary' gutterBottom>\r\n                        Deaths\r\n                    </Typography>\r\n                    <Typography variant = 'h5'>\r\n                        <CountUp\r\n                            start = {0}\r\n                            end = {deaths.value}\r\n                            duration = {2.5}\r\n                            separator = ','\r\n                        />\r\n                    </Typography>\r\n                    <Typography colr = 'textSecondary'>\r\n                        {new Date(lastUpdate).toDateString()}\r\n                    </Typography>\r\n                    <Typography variant = 'body2'>\r\n                        Number of deaths from COVID - 19\r\n                    </Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } \r\n  catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n// export const fetchDailyData = async () => {\r\n//   try {\r\n//     const { data } = await axios.get(`${url}/daily`);\r\n\r\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n// Instead of Global, it fetches the daily data for the US\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n\r\n    } catch (error) {\r\n\r\n      return error;\r\n    }\r\n  };\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: {countries }} = await axios.get(`${url}/countries`);\r\n   \r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = (await fetchDailyData());\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n\r\n    confirmed\r\n      ?\r\n        (\r\n          <Bar\r\n            data = {{\r\n              labels: ['Infected', 'Recovered', \"Deaths\"],\r\n              datasets: [{\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                data: [confirmed.value, recovered.value, deaths.value]\r\n              }]\r\n            }}\r\n            options= {{\r\n              legend : { display: false},\r\n              title: { display :true, text: `Current state in ${country}`},\r\n            }}\r\n          \r\n          />\r\n        ) : null\r\n  );\r\n\r\n      \r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchAPI = async () => {\r\n\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n\r\n    return(\r\n       <FormControl className = {styles.formControl}>\r\n        <NativeSelect defaultValue = \"\" onChange = {(e) => handleCountryChange(e.target.value)}>\r\n            <option value = \"\">Global</option>\r\n        </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components'\r\n\r\nimport { fetchData } from './api';\r\n\r\nimport styles from './App.module.css';\r\n\r\n\r\nimport covidImage from './img/covidImg2.png';\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount(){\r\n\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData});\r\n    \r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data:fetchedData, country: country});\r\n    }\r\n\r\n    render(){\r\n\r\n        const { data, country } = this.state;\r\n\r\n        return(\r\n            <div className = {styles.container}>\r\n                <img className = {styles.image} src = {covidImage} alt = 'Covid 19 Image'/>\r\n                <Cards data = {data} />\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n \t\t    <Chart data={data} country={country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2h5kr\",\"image\":\"App_image__1su9T\",\"contrainer\":\"App_contrainer__m8IJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3lqA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__kEK5m\"};","module.exports = __webpack_public_path__ + \"static/media/covidImg2.d7265326.png\";"],"sourceRoot":""}